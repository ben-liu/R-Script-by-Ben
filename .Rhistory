doc
doc <- xmlTreeParse(url,useInternal=TRUE)
url = "http://www.acca-business.org/pls/ecommerce/epfpl001.p_results?p_client_type=GRAD&p_letter=A&p_start=0"
doc <- xmlTreeParse(url,useInternal=TRUE)
con = url(url)
htmlcode = readLines(con)
library("httr")
html <- GET(url)
content2 = content(html,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
library("httr")
html <- GET(url)
content2 = content(html,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml,"//title",xmlValue)
library(RCurl)
library(XML)
# Download page using RCurl
# You may need to set proxy details, etc.,  in the call to getURL
theurl <- "https://www.acca-business.org/pls/ecommerce/epfpl001.p_results?p_client_type=GRAD&p_letter=A&p_start=0"
webpage <- getURL(theurl)
# Process escape characters
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
# Parse the html tree, ignoring errors on the page
pagetree <- htmlTreeParse(webpage, error=function(...){})
# Navigate your way through the tree. It may be possible to do this more efficiently using getNodeSet
body <- pagetree$children$html$children$body
divbodyContent <- body$children$div$children[[1]]$children$div$children[[4]]
tables <- divbodyContent$children[names(divbodyContent)=="table"]
body
pagetree[1]
pagetree[2]
pagetree[3]
pagetree[3]$children$html
str(pagetree[3]$children$html)
pagetree[3]$children$html[2]
pagetree[3]$children$html[3]
pagetree[3]$children$html[2]
str(pagetree[3]$children$html[2])
pagetree[3]$children$html[2][1]
pagetree[3]$children$html[2][2]
pagetree[3]$children$html[2][3]
pagetree[3]$children$html[2][1]
dim(pagetree[3]$children$html[2])
str(pagetree[3]$children$html[2])
pagetree[3]$children$html[2]$td
pagetree[3]$children$html[2]$text
pagetree[3]$children$html[2]
pagetree[3]$children$html[2]$body
str(pagetree[3]$children$html[2])
pagetree[3]$children$html[2]$body[1]
pagetree[3]$children$html[2]$body[2]
pagetree[3]$children$html[2]$body[3]
pagetree[3]$children$html[2]$body[1]
pagetree[3]$children$html[2]$body$td
pagetree[3]$children$html[2]$body$tr
pagetree[3]$children$html[2]$body$table
pagetree[3]$children$html[2]$body$body
pagetree[3]$children$html[2]$body
html <- GET(url)
library("httr")
html <- GET(url)
body
str(body)
body[1]
body[2]
body[[1]]
body[[2]]
body[1][1]
body[1][2]
body[1]
body[1]$table
str(body[1]$table)
str(body[1]$table)$tr
str(body[1]$table)$tr$tr
str(body[1]$table)$tr$tr$tr
body[1]$table$tr
body[1]$table$trwebpage
webpage
webpage <- getURL(url)
url = "http://www.acca-business.org/pls/ecommerce/epfpl001.p_results?p_client_type=GRAD&p_letter=A&p_start=0"
library(RCurl)
library(XML)
# Download page using RCurl
webpage <- getURL(url)
# Process escape characters
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
install.packages("rvest")
library(rvest)
doc=html(url)
url="https://www.acca-business.org/pls/ecommerce/epfpl001.p_results?p_client_type=GRAD&p_letter=A&p_start=0"
# Download page using RCurl
webpage <- getURL(url)
# Process escape characters
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
webpage
pagetree <- htmlTreeParse(webpage, error=function(...){})
pagetree[3]$children$html
grepl("*ACCA Affiliates Database",webpage)
start=row(webpage[grepl("*ACCA Affiliates Database",webpage)=T,0])
row(webpage[grepl("*ACCA Affiliates Database",webpage)=T,0])
row(webpage[grepl("*ACCA Affiliates Database",webpage)])
webpage
start=0
webpage[1]
webpage[2]
start+=1
start=0
while !grepl("*ACCA Affiliates Database",webpage[i]):
start=start+1
row(webpage)
dim(webpage)
rows(grepl("*ACCA Affiliates Database",webpage)
)
rows(webpage)
row.names(webpage[1])
webpage
len(webpage)
length(webpage)
"<TD width=\"20%\"><B>Student No</B></TD>"                                                                                                                                                "<TD width=\"20%\"><B>Student No</B></TD>" %in% webpage[1]
"Student No" %in% webpage[1]
start=0
for (i in length(webpage)){
if ("Student No" %in% webpage[i]){
break
}
else {start=start+1}
}
start=0
for (i in length(webpage)){
if ("Student No" %in% webpage[i]){
start=i
}
else{}
start=0
for (i in length(webpage)) {
if ("Student No" %in% webpage[i]){
start=i
}
}
webpage[189]
"Student No" %in% webpage[189]
"Student" %in% webpage[189]
str(webpage[189])
"*Student" %in% webpage[189]
"*Student*" %in% webpage[189]
grepl("Student",webpage[189])
grepl("Student",webpage[181])
start=0
for (i in length(webpage)) {
if (grep("Student No",webpage[i]){
start=i
}
}
start=0
for (i in length(webpage)) {
if (grep("Student No",webpage[i]){
start=i
}
else{}
}
start=0
for (i in length(webpage)) {
if (grep("Student No",webpage[i])) {start=i}
}
start=0
for (i in length(webpage)) {
if (grep("Student No",webpage[i])) {start==i}
}
start=0
for (i in length(webpage)) {
if (grep("Student No",webpage[i])) {start==i}
else{}
}
start=0
for (i in length(webpage)) {
if (grepl("Student",webpage[i])) {start==i;break}
}
start=0
for (i in length(webpage)) {
if (grep("Student",webpage[i])) {start==i;break}
}
while (!grep("Student",webpage[start])) {start=start+1}
!grep("Student",webpage[start])
grep("Student",webpage[start])
grep("Student",webpage[1])
grep("Student",webpage[2])
grep("Student",webpage[189])
grep("Student",webpage[181])
grepl("Student",webpage[181])
!grepl("Student",webpage[181])
while (!grepl("Student",webpage[start])) {start=start+1}
while (grepl("Student",webpage[start])==F) {start=start+1}
while (grepl("Student",webpage[start])==F) {start==start+1}
while (!grepl("Student",webpage[start])) {start=start+1;}
while (!grepl("Student",webpage[start])) {start=start+1;next;}
start=0
for (i in length(webpage)) {
if (grepl("Student",webpage[i])) break
}
start=0
for (i in length(webpage)) {
if (grepl("Student",webpage[i])) start=i; break
}
start=0
for (i in length(webpage)) {
ifelse(grepl("Student",webpage[i]), start=i; )
}
grepl("TD width=\"20%\"",webpage)
df=webpage[grepl("TD width=\"20%\"",webpage)]
df
df=webpage[grepl("<TD width=\"20%\"><B>",webpage)]
df=webpage[grepl("TD width=\"20%\"",webpage)]df
df
df=webpage[grepl("<TD width=\"20%\">",webpage)]
df=df["<TD width=\"20%\"></TD>" %in% df]
df=df["\<TD width\=\"20%\"\>\<\/TD\>" !%in% df]
df=df["<TD width=\"20%\"></TD>" !%in% df]
df=df[!("<TD width=\"20%\"></TD>" %in% df)]
df=webpage[grepl("<TD width=\"20%\">",webpage)]
df=gsub("<TD width=\"20%\">","",df)
df
df=gsub("<TD width=\"20%\">|"</TD>"","",df)
df=gsub("<TD width=\"20%\">","",df)
df=gsub("</TD>","",df)
df
df=gsub("</TD>|</B>|<B>","",df)
df
dat=matrix(df,ncol=5,byrow=F)
dat
dat=matrix(df,ncol=5,byrow=T)
dat
dat=as.data.frame(matrix(df,ncol=5,byrow=T),row.names = T)
dat
dat=as.data.frame(matrix(df,ncol=5,byrow=T),row.names = df[1:5])
dat
df[1:5]
dat=as.data.frame(matrix(df,ncol=5,byrow=T,),row.names = c(df[1:5]))
dat
names(dat)=df[1:5]
dat
dat=as.data.frame(matrix(df,ncol=5,byrow=T,dimnames = list(df[1:5],NULL)))
dat=as.data.frame(matrix(df,ncol=5,byrow=T,dimnames = list(NULL,df[1:5])))
dat
dat=dat[-1,]
dat
url = "https://www.acca-business.org/pls/ecommerce/epfpl001.p_results?p_client_type=GRAD&p_letter=A&p_start=1000"
# Download page using RCurl
webpage <- getURL(url)
# Process escape characters
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
webpage
df=webpage[grepl("<TD width=\"20%\">",webpage)]
url = "https://www.acca-business.org/pls/ecommerce/epfpl001.p_results?p_client_type=GRAD&p_letter=A&p_start=200"
# Download page using RCurl
webpage <- getURL(url)
# Process escape characters
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
df=webpage[grepl("<TD width=\"20%\">",webpage)]
df
url = "https://www.acca-business.org/pls/ecommerce/epfpl001.p_results?p_client_type=GRAD&p_letter=A&p_start=1000"
# Download page using RCurl
webpage <- getURL(url)
# Process escape characters
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
df=webpage[grepl("<TD width=\"20%\">",webpage)]
df
df==NULL
df==NULL
ifelse(df==NULL,TRUE,FALSE)
ifelse(df==NULL,"true","false")
len(df)
length(df)
length(df)==0
for (i in LETTERS)
{print i}
a=NULL
for (i in LETTERS){
a=i
}
LETTERS[26]
library(XML)
library(RCurl)
database=NULL
for (i in 1:26){
for (n in 0:100){
url = paste0("https://www.acca-business.org/pls/ecommerce/epfpl001.p_results?p_client_type=GRAD&p_letter="
,LETTERS[i]
,"&p_start="
,20*n)
# Download page using RCurl
webpage <- getURL(url)
# Process escape characters
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
df=webpage[grepl("<TD width=\"20%\">",webpage)]
if (length(df)==0) break
df=gsub("<TD width=\"20%\">","",df)
df=gsub("</TD>|</B>|<B>","",df)
dat=as.data.frame(matrix(df,ncol=5,byrow=T,dimnames = list(NULL,df[1:5])))
dat=dat[-1,]
database=rbind(database,dat)
}
}
View(dat)
View(database)
str(database)
source('~/Google Drive/Coursera/parse.R', echo=TRUE)
summary(database)
ls(-c(database))
ls(database)
ls()
ls(-database)
ls(-c(database))
ls(-c("database"))
ls(-"database")
write.csv(database,"acca dec 2014 affiliate.csv",row.names=F)
gwtwd()
getwd()
cn=database[database$Country %in% "China",]
cn=database[database$Country %in% "China,Peoples Rep of",]
cn
View(cn)
cn[2,3]
cn[2][3]
cn[2]
cn[2][2]
cn[2][1]
cn[2][2]
cn[2][3]
cn$Surname[2]
strsplit(cn$Surname[2]," ")
strsplit(as.character(cn$Surname[2])," ")
strsplit(as.character(cn$Surname[7])," ")
strsplit(as.character(cn$Surname[7])," ")[2]
strsplit(as.character(cn$Surname[7])," ")
strsplit(as.character(cn$Surname[7])," ")[[1]][2]
strsplit(as.character(cn$Surname[7])," ")[[1]][1]
strsplit(as.character(cn$Surname[7])," ")[[1]][2:]
names(database)
gsub("( )|\/","\.",names(database))
gsub(" |/",".",names(database))
names(database)= gsub(" |/",".",names(database))
names(database)
database$Surname = as.character(database$Surname)
database$First.Name = as.character(database$First.Name)
is.empty(database[2][2])
is.blank(database[2][2])
bak=database
for (n in 1:length(database)){
if (database$Country[n] %in% "China,Peoples Rep of"
& grepl(" ",database$Surname[n])
& length(database$First.Name[n])==0)
{
full=database$Surname[n]
database$Surname[n]=strsplit(full," ")[[1]][1]
database$First.Name[n]=gsub(paste0(strsplit(full," ")[[1]][1]," "),"",full)
}
}
View(database)
database=bak
library(dplyr)
summarise(group_by(database,Country),count(Country))
database$Country=as.character(database$Country)
summarise(group_by(database,Country),count(Country))
library(ggplot2)
ggplot(database,aes(group=Country))+geom_bar(stat="identity", position="dodge")
count(database$Country)
library(dplyr)
count_(database,Country,sort=T)
count_(database,database$Country,sort=T)
n_distinct(database$Country)
table(database$Country)
aggregate(database,by = unique(database$Country))
aggregate(database,by = unique(database$Country),sum)
aggregate(database,by = list(unique(database$Country)),sum)
aggregate(database,by = list(unique(database$Country)),FUN = count)
boxplot(database$Country)
sort(table(database$Country),decreasing=T)
tb=sort(table(database$Country),decreasing=T)
class(tb)
matrix(tb,ncol=2,byrow = F)
matrix(tb,ncol=2,byrow = T)
unlist(tb)
names(tb)
as.matrix(tb)
as.data.frame(tb)
names(tb)=c("Country","No.of.Affiliates")
tb
tb=sort(table(database$Country),decreasing=T)
tb=as.data.frame(tb)
class(tb)
dim(tb)
tb=as.data.frame(as.matrix(tb))
tb
dim(tb)
tb=as.data.frame(as.matrix(tb),row.names = F)
tb
tb=as.matrix(tb))
tb=as.matrix(tb)
tb
tb=sort(table(database$Country),decreasing=T)
tb=as.matrix(tb)
dim(tb)
tb
tb=sort(table(database$Country),decreasing=T)
tb=as.matrix(tb,rownames.force = NULL)
tb
dim(tb)
tb=sort(table(database$Country),decreasing=T)
tb=as.matrix(tb,rownames.force = NA)
dim(tb)
tb=sort(table(database$Country),decreasing=T)
tb=as.data.frame(tb)
tb$Country=row.names(tb)
tb
names(tb)=c("Country","No.of.Affiliates")
tb
tb=as.data.frame(tb)
tb$Country=row.names(tb)
names(tb)=c("No.of.Affiliates","Country")
tb
names(tb)
tb=sort(table(database$Country),decreasing=T)
tb=as.data.frame(tb)
tb
tb$Country=row.names(tb)
tb
names(tb)=c("No.of.Affiliates","Country")
names(tb)
tb
boxplot(tb)
class(tb)
plot(tb)
str(tb)
plot(tb,y=Country)
plot(tb,y=Country,x=No.of.Affiliates)
with(tb,plot(x=Country,y=No.of.Affiliates))
table(tb)
summary(tb)
library(ggplot)
library(ggplo2)
library(ggplot2)
with(tb,boxplot(x=Country))
ggplot(tb,aes(x=Country,y=No.of.Affiliates))+geom_point()
ggplot(tb,aes(x=Country,y=No.of.Affiliates))+geom_bar()
ggplot(tb,aes(x=Country,y=No.of.Affiliates))+geom_point()
install.packages("rworldmap")
library(rworldmap)
newmap <- getMap(resolution = "low")
plot(newmap)
library(rworldmap)
newmap <- getMap(resolution = "coarse")
plot(newmap)
install.packages("manipulate")
setwd("~/Users/changlongliu/GitHub/parse-with-R/ACCA recent affiliates/"
)
setwd("~/GitHub/parse-with-R")
install.packages("manipulate")
database=read.csv("ACCA recent affiliates database.R")
View(database)
# database=read.csv("acca dec 2014 affiliate.csv")
database=read.csv("acca dec 2014 affiliate.csv")
View(database)
str(database)
database$Country=as.character(database$Country)
library(rworldmap)
mapDevice('x11')
map=joinCountryData2Map(database, joinCode="NAME", nameJoinColumn="Country")
mapCountryData(map, nameColumnToPlot="No.of.Affiliates", catMethod="fixedWidth")
View(database)
tb=sort(table(database$Country),decreasing=T)
tb=as.data.frame(tb)
tb$Country=row.names(tb)
names(tb)=c("No.of.Affiliates","Country")
View(tb)
library(rworldmap)
map=joinCountryData2Map(tb, joinCode="NAME", nameJoinColumn="Country")
mapCountryData(map, nameColumnToPlot="No.of.Affiliates", catMethod="fixedWidth")
View(tb)
tb$Country=gsub("China,Peoples Rep of","China",tb$Country)
map=joinCountryData2Map(tb, joinCode="NAME", nameJoinColumn="Country")
mapCountryData(map, nameColumnToPlot="No.of.Affiliates", catMethod="fixedWidth")
map=joinCountryData2Map(tb, joinCode="NAME", nameJoinColumn="Country",verbose=TRUE)
tb$Country=gsub(" SAR","",tb$Country)
tb$Country=gsub("St","Saint",tb$Country)
tb$Country=gsub("&","and",tb$Country)
tb$Country=gsub("-","and ",tb$Country)
tb$Country=gsub("Dem Rep of","the Democratic Republic of the",tb$Country)
map=joinCountryData2Map(tb, joinCode="NAME", nameJoinColumn="Country",verbose=TRUE)
mapCountryData(map, nameColumnToPlot="No.of.Affiliates", catMethod="fixedWidth")
tb=sort(table(database$Country),decreasing=T)
tb=as.data.frame(tb)
tb$Country=row.names(tb)
names(tb)=c("No.of.Affiliates","Country")
# mark location on map (WIP)
# change country name
tb$Country=gsub("China,Peoples Rep of","China",tb$Country)
tb$Country=gsub(" SAR","",tb$Country)
tb$Country=gsub("St Vincent","Saint Vincent and the Grenadines",tb$Country)
tb$Country=gsub("&","and",tb$Country)
tb$Country=gsub("  and"," and",tb$Country)
tb$Country=gsub("-","and ",tb$Country)
tb$Country=gsub("Dem Rep of","the Democratic Republic of the",tb$Country)
tb$Country=gsub("Turks and Caicos","Turks and Caicos Islands",tb$Country)
library(rworldmap)
map=joinCountryData2Map(tb, joinCode="NAME", nameJoinColumn="Country",verbose=TRUE)
mapCountryData(map, nameColumnToPlot="No.of.Affiliates", catMethod="fixedWidth")
tb$Country=gsub("St","Saint",tb$Country)
map=joinCountryData2Map(tb, joinCode="NAME", nameJoinColumn="Country",verbose=TRUE)
mapCountryData(map, nameColumnToPlot="No.of.Affiliates", catMethod="fixedWidth")
map=joinCountryData2Map(tb, joinCode="NAME", nameJoinColumn="Country",verbose=TRUE, missingCountryCol = gray(.8))
mapCountryData(map, nameColumnToPlot="No.of.Affiliates", catMethod="fixedWidth", missingCountryCol = gray(.8))
